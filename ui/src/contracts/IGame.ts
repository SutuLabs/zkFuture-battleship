/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "gameState"
      | "joinGame"
      | "playFirstTurn"
      | "playTurn"
      | "startGame"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Joined"
      | "ShotFired"
      | "ShotLanded"
      | "Started"
      | "Won"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "gameState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playFirstTurn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playTurn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playFirstTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
}

export namespace JoinedEvent {
  export type InputTuple = [_gameId: BigNumberish, _by: AddressLike];
  export type OutputTuple = [_gameId: bigint, _by: string];
  export interface OutputObject {
    _gameId: bigint;
    _by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShotFiredEvent {
  export type InputTuple = [_gameId: BigNumberish, _shotIndex: BigNumberish];
  export type OutputTuple = [_gameId: bigint, _shotIndex: bigint];
  export interface OutputObject {
    _gameId: bigint;
    _shotIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShotLandedEvent {
  export type InputTuple = [_gameId: BigNumberish, _shipId: BigNumberish];
  export type OutputTuple = [_gameId: bigint, _shipId: bigint];
  export interface OutputObject {
    _gameId: bigint;
    _shipId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartedEvent {
  export type InputTuple = [_gameId: BigNumberish, _by: AddressLike];
  export type OutputTuple = [_gameId: bigint, _by: string];
  export interface OutputObject {
    _gameId: bigint;
    _by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WonEvent {
  export type InputTuple = [_gameId: BigNumberish, _by: AddressLike];
  export type OutputTuple = [_gameId: bigint, _by: string];
  export interface OutputObject {
    _gameId: bigint;
    _by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGame extends BaseContract {
  connect(runner?: ContractRunner | null): IGame;
  waitForDeployment(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gameState: TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [[string, string], [bigint, bigint], bigint, [bigint, bigint], string] & {
        _participants: [string, string];
        _boards: [bigint, bigint];
        _turn: bigint;
        _hits: [bigint, bigint];
        _winner: string;
      }
    ],
    "view"
  >;

  joinGame: TypedContractMethod<
    [
      _gameId: BigNumberish,
      _boardHash: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  playFirstTurn: TypedContractMethod<
    [_gameId: BigNumberish, _turnShotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  playTurn: TypedContractMethod<
    [
      _gameId: BigNumberish,
      _hitShipId: BigNumberish,
      _prevTurnShotIndex: BigNumberish,
      _turnShotIndex: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  startGame: TypedContractMethod<
    [
      _boardHash: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gameState"
  ): TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [[string, string], [bigint, bigint], bigint, [bigint, bigint], string] & {
        _participants: [string, string];
        _boards: [bigint, bigint];
        _turn: bigint;
        _hits: [bigint, bigint];
        _winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [
      _gameId: BigNumberish,
      _boardHash: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "playFirstTurn"
  ): TypedContractMethod<
    [_gameId: BigNumberish, _turnShotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "playTurn"
  ): TypedContractMethod<
    [
      _gameId: BigNumberish,
      _hitShipId: BigNumberish,
      _prevTurnShotIndex: BigNumberish,
      _turnShotIndex: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<
    [
      _boardHash: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "ShotFired"
  ): TypedContractEvent<
    ShotFiredEvent.InputTuple,
    ShotFiredEvent.OutputTuple,
    ShotFiredEvent.OutputObject
  >;
  getEvent(
    key: "ShotLanded"
  ): TypedContractEvent<
    ShotLandedEvent.InputTuple,
    ShotLandedEvent.OutputTuple,
    ShotLandedEvent.OutputObject
  >;
  getEvent(
    key: "Started"
  ): TypedContractEvent<
    StartedEvent.InputTuple,
    StartedEvent.OutputTuple,
    StartedEvent.OutputObject
  >;
  getEvent(
    key: "Won"
  ): TypedContractEvent<
    WonEvent.InputTuple,
    WonEvent.OutputTuple,
    WonEvent.OutputObject
  >;

  filters: {
    "Joined(uint256,address)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "ShotFired(uint256,uint8)": TypedContractEvent<
      ShotFiredEvent.InputTuple,
      ShotFiredEvent.OutputTuple,
      ShotFiredEvent.OutputObject
    >;
    ShotFired: TypedContractEvent<
      ShotFiredEvent.InputTuple,
      ShotFiredEvent.OutputTuple,
      ShotFiredEvent.OutputObject
    >;

    "ShotLanded(uint256,uint8)": TypedContractEvent<
      ShotLandedEvent.InputTuple,
      ShotLandedEvent.OutputTuple,
      ShotLandedEvent.OutputObject
    >;
    ShotLanded: TypedContractEvent<
      ShotLandedEvent.InputTuple,
      ShotLandedEvent.OutputTuple,
      ShotLandedEvent.OutputObject
    >;

    "Started(uint256,address)": TypedContractEvent<
      StartedEvent.InputTuple,
      StartedEvent.OutputTuple,
      StartedEvent.OutputObject
    >;
    Started: TypedContractEvent<
      StartedEvent.InputTuple,
      StartedEvent.OutputTuple,
      StartedEvent.OutputObject
    >;

    "Won(uint256,address)": TypedContractEvent<
      WonEvent.InputTuple,
      WonEvent.OutputTuple,
      WonEvent.OutputObject
    >;
    Won: TypedContractEvent<
      WonEvent.InputTuple,
      WonEvent.OutputTuple,
      WonEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  RevealAttackVerifier,
  RevealAttackVerifierInterface,
} from "../RevealAttackVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[3]",
        name: "input",
        type: "uint256[3]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f11806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61012c600480360361016081101561004757600080fd5b6040805180820182529183019291818301918390600290839083908082843760009201829052506040805180820190915293969594608081019493509150600290835b828210156100c8576040805180820182529080840286019060029083908390808284376000920191909152505050815260019091019060200161008a565b5050604080518082018252939695948181019493509150600290839083908082843760009201919091525050604080516060818101909252929594938181019392509060039083908390808284376000920191909152509194506101409350505050565b604080519115158252519081900360200190f35b600061014a610db0565b60408051808201825287518152602080890151818301529083528151608080820184528851518285019081528951840151606080850191909152908352845180860186528a85018051518252518501518186015283850152858401929092528351808501855288518152888401518185015285850152835160038082529181019094529092918201838036833701905050905060005b6003811015610219578481600381106101f557fe5b602002015182828151811061020657fe5b60209081029190910101526001016101e0565b506102248183610242565b6102335760019250505061023a565b6000925050505b949350505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161026d610de2565b61027561041e565b90508060800151518551600101146102c9576040805162461bcd60e51b81526020600482015260126024820152711d995c9a599a595c8b5898590b5a5b9c1d5d60721b604482015290519081900360640190fd5b6102d1610e29565b6040518060400160405280600081526020016000815250905060005b86518110156103a7578387828151811061030357fe5b60200260200101511061035d576040805162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c6400604482015290519081900360640190fd5b61039d826103988560800151846001018151811061037757fe5b60200260200101518a858151811061038b57fe5b602002602001015161080f565b6108a4565b91506001016102ed565b506103ca8183608001516000815181106103bd57fe5b60200260200101516108a4565b90506104006103dc8660000151610935565b8660200151846000015185602001518587604001518b6040015189606001516109c1565b6104105760019350505050610418565b600093505050505b92915050565b610426610de2565b6040805180820182527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266020808301919091529083528151608080820184527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c8285019081527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab606080850191909152908352845180860186527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8818601528385015285840192909252835180820185527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28186018181527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed838601819052908352865180880188527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b8082527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa82890181905285890192909252898901949094528751948501885284880192835284860191909152908352855180870187529182528185015281840152908401528151600480825260a08201909352919082015b610636610e29565b81526020019060019003908161062e57505060808201908152604080518082019091527f11c1a68cb75448a8f5d5695f3efc463ad7bdc7a0a191ff25a0b6f7cbdb6e1c7281527f2d7732612ab3c1d6e6e8fa9501382a8732e332925170360c42278f60d5297fdd6020820152905180516000906106af57fe5b602002602001018190525060405180604001604052807ea74e36388df18869ff2d568f3eb7b53031653242fa6e5ff488ef56f8ece8a781526020017f1268c7efc71674c0d42fe1e756653741af8839bd6ee82aff00fa5681dea3c3dd815250816080015160018151811061071f57fe5b602002602001018190525060405180604001604052807f0e66d202626534063c5b6dc5a6d8c7a3899aa4ab4dd7149ae863dff84b036b9081526020017f156247ed83508c665189e09a72d8b3b0d9205d6b50818eba49e22ab21eb5189a815250816080015160028151811061079057fe5b602002602001018190525060405180604001604052807f277c3b6108cef02a104b7f12854c3f8c2c92c645cb38fc822adaa506432d840e81526020017f13a224ffa96b5969957248f8403b50e569891d9c425f136bcdf0e863b59b2db8815250816080015160038151811061080157fe5b602002602001018190525090565b610817610e29565b61081f610e43565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561085257610854565bfe5b508061089c576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b6108ac610e29565b6108b4610e61565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561085257508061089c576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b61093d610e29565b81517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561097057506020830151155b1561099057505060408051808201909152600080825260208201526109bc565b604051806040016040528084600001518152602001828560200151816109b257fe5b0683038152509150505b919050565b60408051600480825260a0820190925260009160609190816020015b6109e5610e29565b8152602001906001900390816109dd57505060408051600480825260a0820190925291925060609190602082015b610a1b610e7f565b815260200190600190039081610a135790505090508a82600081518110610a3e57fe5b60200260200101819052508882600181518110610a5757fe5b60200260200101819052508682600281518110610a7057fe5b60200260200101819052508482600381518110610a8957fe5b60200260200101819052508981600081518110610aa257fe5b60200260200101819052508781600181518110610abb57fe5b60200260200101819052508581600281518110610ad457fe5b60200260200101819052508381600381518110610aed57fe5b6020026020010181905250610b028282610b11565b9b9a5050505050505050505050565b60008151835114610b62576040805162461bcd60e51b81526020600482015260166024820152751c185a5c9a5b99cb5b195b99dd1a1ccb59985a5b195960521b604482015290519081900360640190fd5b82516006810260608167ffffffffffffffff81118015610b8157600080fd5b50604051908082528060200260200182016040528015610bab578160200160208202803683370190505b50905060005b83811015610d3057868181518110610bc557fe5b602002602001015160000151828260060260000181518110610be357fe5b602002602001018181525050868181518110610bfb57fe5b602002602001015160200151828260060260010181518110610c1957fe5b602002602001018181525050858181518110610c3157fe5b602090810291909101015151518251839060026006850201908110610c5257fe5b602002602001018181525050858181518110610c6a57fe5b60209081029190910101515160016020020151828260060260030181518110610c8f57fe5b602002602001018181525050858181518110610ca757fe5b602002602001015160200151600060028110610cbf57fe5b6020020151828260060260040181518110610cd657fe5b602002602001018181525050858181518110610cee57fe5b602002602001015160200151600160028110610d0657fe5b6020020151828260060260050181518110610d1d57fe5b6020908102919091010152600101610bb1565b50610d39610e9f565b6000602082602086026020860160086107d05a03fa9050808015610852575080610da2576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159695505050505050565b6040518060600160405280610dc3610e29565b8152602001610dd0610e7f565b8152602001610ddd610e29565b905290565b6040518060a00160405280610df5610e29565b8152602001610e02610e7f565b8152602001610e0f610e7f565b8152602001610e1c610e7f565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280610e92610ebd565b8152602001610ddd610ebd565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280600290602082028036833750919291505056fea2646970667358221220d1573789a302983bd658318e59a98197b3c722dc4cd8afbdcbc657dc757abf9864736f6c634300060c0033";

type RevealAttackVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevealAttackVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevealAttackVerifier__factory extends ContractFactory {
  constructor(...args: RevealAttackVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RevealAttackVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RevealAttackVerifier__factory {
    return super.connect(runner) as RevealAttackVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevealAttackVerifierInterface {
    return new Interface(_abi) as RevealAttackVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RevealAttackVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RevealAttackVerifier;
  }
}
